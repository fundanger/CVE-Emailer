# Script that searches the NIST National Vulnerability Database for the given Vendors/Services
# and returns new CVEs for those services(if any) in the format of an email every X amount of hours
# This product uses the NVD API but is not endorsed or certified by the NVD
import configparser
from email.mime.text import MIMEText
import requests
import json
import mail
import fileIO
import mysql.connector
from datetime import datetime

cfg = configparser.ConfigParser()
cfg.read("config.ini")

# cve_URL does not currently work when searching for CVEs through vendor/product search
# cve_URL = 'https://cve.circl.lu/api/search/apache/groovy'
# Working with NIST URL now
vendor = 'Apache'
service = 'HTTPClient'
URL = 'https://services.nvd.nist.gov/rest/json/cves/2.0?keywordsSearch=' + vendor + ' ' + service + '&keywordExactMatch'  # Keyword search
URL2 = 'https://services.nvd.nist.gov/rest/json/cves/2.0?cpeName='  # CPE search


def getSearchResult(API_URL):
    resp = requests.get(API_URL)  # Gets the response
    # print(resp.json())  # UNCOMMENT TO PRINT RAW JSON FILE
    return resp.json()


def getIdNums(resultCount, jsonFile):  # prints out each CVE related to the search result
    emailLines = []
    for i in range(resultCount):
        emailLines.append(jsonFile['vulnerabilities'][i]['cve']['id'])
        # print(jsonFile['vulnerabilities'][i]['cve']['id'])
        emailLines.append("Creation Date: " + jsonFile['vulnerabilities'][i]['cve']['published'])
        # print("Creation Date: " + jsonFile['vulnerabilities'][i]['cve']['published'])
        emailLines.append("Last Modified: " + jsonFile['vulnerabilities'][i]['cve']['lastModified'])
        # print("Last Modified: " + jsonFile['vulnerabilities'][i]['cve']['lastModified'])
        emailLines.append(jsonFile['vulnerabilities'][i]['cve']['descriptions'][0]['value'])
        # print(jsonFile['vulnerabilities'][i]['cve']['descriptions'][0]['value'])
        emailLines.append('\n')
    return emailLines


def getTotalResults(jsonFile):  # Gets the number of results from the given search
    resultNum = jsonFile['totalResults']
    # print("There are " + resultNum + " results.")
    return resultNum


def formatJson(jsonFile):  # Formats the given JSON file to a readable console output
    formattedJson = (json.dumps(jsonFile, sort_keys=True, indent=4))  # Pretty Print JSON file
    return formattedJson


def singleSearch(URL):
    jsonFile = getSearchResult(URL)
    resultCount = getTotalResults(jsonFile)
    message = getIdNums(resultCount, jsonFile)
    messageFormatted = MIMEText('\n'.join(message))
    # print(messageFormatted) # UNCOMMENT TO PRINT THE FORMATTED EMAIL MESSAGE
    return messageFormatted.as_string()

def timedSearch(URL):
    startTime = int(datetime.now().timestamp())
    counter = 0
    print(startTime)
    while (True):
        if (int(datetime.now().timestamp() - startTime) >= cfg['DEFAULT']['checkFrequency']):
            jsonFile = getSearchResult(URL)
            resultCount = getTotalResults(jsonFile)
            message = getIdNums(resultCount, jsonFile)
            messageFormatted = MIMEText('\n'.join(message))
            print(messageFormatted) # UNCOMMENT TO PRINT THE FORMATTED EMAIL MESSAGE
            email = mail.createEmail(cfg['EMAIL']['senderEmail'], cfg['EMAIL']['recipientEmail'], cfg['EMAIL']['subjectLine'], # Creates Email
                          messageFormatted)
            mail.sendEmail(cfg['EMAIL']['senderEmail'], cfg['EMAIL']['senderPassword'], email) # SENDS EMAIL
            startTime = int(datetime.now().timestamp())
            

            
    
def main():
    currentTime = datetime.datetime.now()
    #singleSearch(cfg['DEFAULT']['apiURL'])
    print(currentTime)
    # jsonFile = getSearchResult(cfg['DEFAULT']['apiURL'])
    # vulnCount = getTotalResults(jsonFile)
    # getIdNums(vulnCount, jsonFile)
    email = mail.createEmail(cfg['EMAIL']['senderEmail'], cfg['EMAIL']['recipientEmail'], cfg['EMAIL']['subjectLine'], # UNCOMMENT TO CREATE EMAIL
                          singleSearch(cfg['DEFAULT']['apiURL']))
    mail.sendEmail(cfg['EMAIL']['senderEmail'], cfg['EMAIL']['senderPassword'], email) # UNCOMMENT TO SEND EMAIL


if __name__ == "__main__":
    print('Starting program')
    try:
        timedSearch(cfg['DEFAULT']['apiURL'])
    except KeyboardInterrupt:
        exit(0)
