# Script that searches the NIST National Vulnerability Database for the given Vendors/Services
# and returns new CVEs for those services(if any) in the format of an email every X amount of hours
# This product uses the NVD API but is not endorsed or certified by the NVD
import configparser
from email.mime.text import MIMEText
import mail
import fileIO
import search
#import mysql.connector
from datetime import datetime

cfg = configparser.ConfigParser()
cfg.read("config.ini")

# cve_URL does not currently work when searching for CVEs through vendor/product search
# cve_URL = 'https://cve.circl.lu/api/search/apache/groovy'
# Working with NIST URL now
vendor = 'Apache'
service = 'HTTPClient'
URL = 'https://services.nvd.nist.gov/rest/json/cves/2.0?keywordsSearch=' + vendor + ' ' + service + '&keywordExactMatch'  # Keyword search
URL2 = 'https://services.nvd.nist.gov/rest/json/cves/2.0?cpeName='  # CPE search

def startUp():
    print('Starting program')
    try:
        try:
            if(cfg.getboolean('DEFAULT','isCPE')) == True and bool(cfg.getboolean('DEFAULT','isKeywordSearch')) == False:
                
                fileIO.readFile(cfg['DEFAULT']['txtList'])
                #Filler
                search.singleSearch(URL)
                print("CPE Search Working!")
        
            elif bool(cfg.getboolean('DEFAULT','isCPE')) == False and bool(cfg.getboolean('DEFAULT','isKeywordSearch')) == True:
                fileIO.readFile(cfg['DEFAULT']['txtList'])
                
                #timedSearch(cfg['DEFAULT']['apiURL'])
                print("Keyword Search working!")
            else:
                print("Something is wrong!")
       
        except ValueError:
            print("Invalid Value, Please enter True or False in the Config file. Exiting")
            exit(0)
       
    except KeyboardInterrupt:
        exit(0)
        
def main():
    currentTime = datetime.datetime.now()
    print(currentTime)
    #email = mail.createEmail(cfg['EMAIL']['senderEmail'], cfg['EMAIL']['recipientEmail'], cfg['EMAIL']['subjectLine'], # UNCOMMENT TO CREATE EMAIL
    #                      singleSearch(cfg['DEFAULT']['apiURL']))
    #mail.sendEmail(cfg['EMAIL']['senderEmail'], cfg['EMAIL']['senderPassword'], email) # UNCOMMENT TO SEND EMAIL


if __name__ == "__main__":
    startUp()