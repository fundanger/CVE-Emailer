import configparser
import json
import re
import time
from datetime import datetime
from email.mime.text import MIMEText

import requests

import database
import mail

config = configparser.ConfigParser()
config.read("config.ini")


def get_search_result(
    api_url,
):  # Contacts the API through the given url and returns the json response
    headers = {
        "apiKey": config["DEFAULT"]["apiKey"],
    }
    resp = requests.get(api_url, headers=headers)  # Gets the response
    # print(resp.json())  # UNCOMMENT TO PRINT RAW JSON FILE
    return resp.json()


def get_result_count(json_file):  # Gets the number of results from the given search
    result_count = json_file["totalResults"]
    print("There are " + str(result_count) + " results.")
    return result_count


def get_id_nums(
    result_count, json_file
):  # prints out cve ID, publish date, last modified date, and description of the CVE from the search results
    email_lines = []
    for i in range(result_count):
        email_lines.append(json_file["vulnerabilities"][i]["cve"]["id"])
        # print(json_file['vulnerabilities'][i]['cve']['id'])
        email_lines.append(
            "Creation Date: " + json_file["vulnerabilities"][i]["cve"]["published"]
        )
        # print("Creation Date: " + json_file['vulnerabilities'][i]['cve']['published'])
        email_lines.append(
            "Last Modified: " + json_file["vulnerabilities"][i]["cve"]["lastModified"]
        )
        # print("Last Modified: " + json_file['vulnerabilities'][i]['cve']['lastModified'])
        email_lines.append(
            json_file["vulnerabilities"][i]["cve"]["descriptions"][0]["value"]
        )
        # print(json_file['vulnerabilities'][i]['cve']['descriptions'][0]['value'])
        email_lines.append("\n")
    return email_lines


def create_entries(json_file, result_count, formatted_line, email):
    try:
        for i in range(result_count):
            cve_id = json_file["vulnerabilities"][i]["cve"]["id"]
            # print(cve_id)
            cve_id = re.sub(r"\D", "", cve_id)
            publish_date = json_file["vulnerabilities"][i]["cve"]["published"]
            datetime_object = datetime.strptime(publish_date, "%Y-%m-%dT%H:%M:%S.%f")
            publish_date = datetime_object.strftime("%Y-%m-%d %H:%M:%S")
            last_modified = json_file["vulnerabilities"][i]["cve"]["lastModified"]
            datetime_object = datetime.strptime(last_modified, "%Y-%m-%dT%H:%M:%S.%f")
            last_modified = datetime_object.strftime("%Y-%m-%d %H:%M:%S")
            description = json_file["vulnerabilities"][i]["cve"]["descriptions"][0][
                "value"
            ]
            # email += "Service name: " + formatted_line + " has new vulnerabilities."
            email = database.insert_data(
                formatted_line, cve_id, publish_date, last_modified, description, email
            )
    except FileNotFoundError as error:
        print("There was a problem opening the file, exiting.")
        exit(0)
    finally:
        return email


def format_json(json_file):  # Formats the given JSON file to a readable console output
    formattedJson = json.dumps(
        json_file, sort_keys=True, indent=4
    )  # Pretty Print JSON file
    return formattedJson


def single_search():
    file = config["DEFAULT"]["txtList"]
    message = ""
    message_length = 0
    try:
        with open(file, "r") as file:
            for line in file:
                url = make_keyword_url(line)
                formatted_line = line.replace(" ", "")
                database.create_tables(formatted_line)
                time.sleep(10)
                json_file = get_search_result(
                    url
                )  # Retrieve the JSON file from the url
                result_count = get_result_count(
                    json_file
                )  # Retrieve the result count from the JSON file
                message = create_entries(
                    json_file, result_count, formatted_line, str(message)
                )
                # print(email)
                message_length += len(message)

            if message_length > 0:
                message_formatted = MIMEText("".join(str(message)))
                print("MIMEText Formatted Message: \n" + str(message_formatted))
                email = mail.create_email(
                    config["EMAIL"]["senderEmail"],
                    config["EMAIL"]["recipientEmail"],
                    config["EMAIL"]["subjectLine"],
                    message_formatted,
                )  # UNCOMMENT TO CREATE EMAIL
                mail.send_email(
                    config["EMAIL"]["senderEmail"],
                    config["EMAIL"]["senderPassword"],
                    email,
                )
            else:
                print("Email contains nothing")

                # print(message_formatted)

            print(url)
    except FileNotFoundError:
        print("There was a problem opening the file, exiting")
        exit(0)
    finally:
        file.close()


def timedSearch():
    startTime = int(datetime.now().timestamp())
    counter = 0
    print(startTime)

    while True:
        if int(datetime.now().timestamp() - startTime) >= int(
            config["DEFAULT"]["checkFrequency"]
        ):
            file = config["DEFAULT"]["txtList"]
            message = ""
            message_length = 0
            try:
                with open(file, "r") as file:
                    for line in file:
                        url = make_keyword_url(line)
                        formatted_line = line.replace(" ", "")
                        database.create_tables(formatted_line)
                        time.sleep(10)
                        json_file = get_search_result(
                            url
                        )  # Retrieve the JSON file from the url
                        result_count = get_result_count(
                            json_file
                        )  # Retrieve the result count from the JSON file
                        message = create_entries(
                            json_file, result_count, formatted_line, str(message)
                        )
                        # print(email)
                        message_length += len(message)

                    if message_length > 0:
                        message_formatted = MIMEText("".join(str(message)))
                        # print("MIMEText Formatted Message: \n" + str(message_formatted)) # PRINTS OUT EMAIL 
                        email = mail.create_email(
                            config["EMAIL"]["senderEmail"],
                            config["EMAIL"]["recipientEmail"],
                            config["EMAIL"]["subjectLine"],
                            message_formatted,
                        )  # UNCOMMENT TO CREATE EMAIL
                        mail.send_email(
                            config["EMAIL"]["senderEmail"],
                            config["EMAIL"]["senderPassword"],
                            email,
                        )
                    else:
                        print("Email contains nothing")

                        # print(message_formatted)

                    print(url)
            except FileNotFoundError:
                print("There was a problem opening the file, exiting")
                exit(0)
            finally:
                file.close()
                startTime = int(datetime.now().timestamp())


def make_keyword_url(keywords):
    url = "https://services.nvd.nist.gov/rest/json/cves/2.0?keywordSearch=" + keywords
    url = url.replace(" ", "%20")
    return url
