from datetime import datetime
from email.mime.text import MIMEText
import configparser
import database
import json
import mail
import re
import requests
import time 

config = configparser.ConfigParser()
config.read("config.ini")

def get_search_result(apiURL): # Contacts the API through the given URL and returns the json response
    headers = {
        'apiKey': config['DEFAULT']['apiKey'],
    }
    resp = requests.get(apiURL, headers=headers)  # Gets the response
    #print(resp.json())  # UNCOMMENT TO PRINT RAW JSON FILE
    return resp.json()

def get_result_count(json_file):  # Gets the number of results from the given search
    result_count = json_file['totalResults']
    print("There are " + str(result_count) + " results.")
    return result_count


def create_entries(json_file, result_count,formattedLine, email):
    try:              
        for i in range(result_count):
            cve_id = json_file['vulnerabilities'][i]['cve']['id']
            #print(cve_id)
            cve_id = re.sub(r"\D", "", cve_id)
            severity_score = json_file['vulnerabilities'][i]['cve']['metrics']['cvssMetricV31'][0]['cvssData']['baseScore']
            publish_date = json_file['vulnerabilities'][i]['cve']['published']
            datetime_object = datetime.strptime(publish_date, '%Y-%m-%dT%H:%M:%S.%f')
            publish_date = datetime_object.strftime('%Y-%m-%d %H:%M:%S')
            last_modified = json_file['vulnerabilities'][i]['cve']['last_modified']
            datetime_object = datetime.strptime(last_modified, '%Y-%m-%dT%H:%M:%S.%f')
            last_modified = datetime_object.strftime('%Y-%m-%d %H:%M:%S')
            description = json_file['vulnerabilities'][i]['cve']['descriptions'][0]['value']
            #email += "Service name: " + formattedLine + " has new vulnerabilities."    
            email = database.insert_data(formattedLine,
                    cve_id,
                    severity_score,
                    publish_date,
                    last_modified,
                    description,
                    email)
    except FileNotFoundError as error:
        print("There was a problem opening the file, exiting.")
        exit(0)
    finally:
        return email

def format_json(json_file):  # Formats the given JSON file to a readable console output
    formatted_JSON = (json.dumps(json_file, sort_keys=True, indent=4))  # Pretty Print JSON file
    return formatted_JSON

def make_keyword_URL(keywords):
    URL = 'https://services.nvd.nist.gov/rest/json/cves/2.0?keywordSearch=' + keywords
    URL = URL.replace(" ", "%20")
    return URL

def single_search():
    file = config['DEFAULT']['txtList']
    message = ""
    message_length = 0
    try:
        with open(file, 'r') as file:
            for line in file:
                URL = make_keyword_URL(line)
                formatted_line = line.replace(" ", "")
                database.create_tables(formatted_line)
                time.sleep(10)
                json_file = get_search_result(URL)# Retrieve the JSON file from the URL
                #print(format_json(json_file))
                result_count = get_result_count(json_file) # Retrieve the result count from the JSON file
                message = create_entries(json_file, result_count, formatted_line, str(message))
                #print(email)
                message_length += len(message)
                
            if message_length > 0:
                message_formatted = MIMEText(''.join(str(message)))
                print("MIMEText Formatted Message: \n" + str(message_formatted))
                email = mail.create_email(config['EMAIL']['senderEmail'],
                                         config['EMAIL']['recipientEmail'],
                                         config['EMAIL']['subjectLine'],
                                         message_formatted) # UNCOMMENT TO CREATE EMAIL
                mail.send_email(config['EMAIL']['senderEmail'], config['EMAIL']['senderPassword'], email)
            else:
                print("Email contains nothing")    
            
            print(URL)
    except FileNotFoundError:
        print("There was a problem opening the file, exiting")
        exit(0)
    finally:
        file.close()

def timed_search():
    start_time = int(datetime.now().timestamp())
    print(start_time)
    
    while (True):
        if (int(datetime.now().timestamp() - start_time) >= int(config['DEFAULT']['checkFrequency'])):
               file = config['DEFAULT']['txtList']
               message = ""
               messageLength = 0
               try:
                   with open(file, 'r') as file:
                       for line in file:
                           URL = make_keyword_URL(line)
                           formatted_line = line.replace(" ", "")
                           database.create_tables(formatted_line)
                           time.sleep(5)
                           json_file = get_search_result(URL)# Retrieve the JSON file from the URL
                           result_count = get_result_count(json_file) # Retrieve the result count from the JSON file
                           message = create_entries(json_file, result_count, formatted_line, str(message))
                           #print(email)
                           message_length += len(message)
                           
                       if message_length > 0:
                           message_formatted = MIMEText(''.join(str(message)))
                           print("MIMEText Formatted Message: \n" + str(message_formatted))
                           email = mail.createEmail(config['EMAIL']['senderEmail'],
                                                    config['EMAIL']['recipientEmail'],
                                                    config['EMAIL']['subjectLine'],
                                                    message_formatted) # UNCOMMENT TO CREATE EMAIL
                           mail.sendEmail(config['EMAIL']['senderEmail'], config['EMAIL']['senderPassword'], email)
                       else:
                           print("Email contains nothing")
                       
                           #print(messageFormatted)
                       
                       print(URL)
               except FileNotFoundError:
                   print("There was a problem opening the file, exiting")
                   exit(0)
               finally:
                   file.close()
                   start_time = int(datetime.now().timestamp())