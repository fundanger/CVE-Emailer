from datetime import datetime
import time
import requests
from email.mime.text import MIMEText
import mail
import database
import json
from datetime import datetime
import configparser
import re

config = configparser.ConfigParser()
config.read("config.ini")

def getSearchResult(API_URL): # Contacts the API through the given URL and returns the json response
    headers = {
        'apiKey': config['DEFAULT']['apiKey'],
    }
    resp = requests.get(API_URL, headers=headers)  # Gets the response
    #print(resp.json())  # UNCOMMENT TO PRINT RAW JSON FILE
    return resp.json()

def getResultCount(jsonFile):  # Gets the number of results from the given search
    resultCount = jsonFile['totalResults']
    print("There are " + str(resultCount) + " results.")
    return resultCount

def getIdNums(resultCount, jsonFile):  # prints out cve ID, publish date, last modified date, and description of the CVE from the search results
    emailLines = []
    for i in range(resultCount):
        emailLines.append(jsonFile['vulnerabilities'][i]['cve']['id'])
        # print(jsonFile['vulnerabilities'][i]['cve']['id'])
        emailLines.append("Creation Date: " + jsonFile['vulnerabilities'][i]['cve']['published'])
        # print("Creation Date: " + jsonFile['vulnerabilities'][i]['cve']['published'])
        emailLines.append("Last Modified: " + jsonFile['vulnerabilities'][i]['cve']['lastModified'])
        # print("Last Modified: " + jsonFile['vulnerabilities'][i]['cve']['lastModified'])
        emailLines.append(jsonFile['vulnerabilities'][i]['cve']['descriptions'][0]['value'])
        # print(jsonFile['vulnerabilities'][i]['cve']['descriptions'][0]['value'])
        emailLines.append('\n')
    return emailLines


def createEntries(jsonFile, resultCount):
    try:
        file = config['DEFAULT']['txtList']
        with open(file, 'r') as file:
            for line in file: 
                formatted_line = line.replace(" ", "")
                
        for i in range(resultCount):
            cve_id = jsonFile['vulnerabilities'][i]['cve']['id']
            print(cve_id)
            cve_id = re.sub(r"\D", "", cve_id)
            publish_date = jsonFile['vulnerabilities'][i]['cve']['published']
            datetime_object = datetime.strptime(publish_date, '%Y-%m-%dT%H:%M:%S.%f')
            publish_date = datetime_object.strftime('%Y-%m-%d %H:%M:%S')
            last_modified = jsonFile['vulnerabilities'][i]['cve']['lastModified']
            datetime_object = datetime.strptime(last_modified, '%Y-%m-%dT%H:%M:%S.%f')
            last_modified = datetime_object.strftime('%Y-%m-%d %H:%M:%S')
            description = jsonFile['vulnerabilities'][i]['cve']['descriptions'][0]['value']    
            database.insertData(formatted_line,
                    cve_id,
                    publish_date,
                    last_modified,
                    description)
    except FileNotFoundError as error:
        print("There was a problem opening the file, exiting.")
        exit(0)

def formatJson(jsonFile):  # Formats the given JSON file to a readable console output
    formattedJson = (json.dumps(jsonFile, sort_keys=True, indent=4))  # Pretty Print JSON file
    return formattedJson

def singleSearch():
    file = config['DEFAULT']['txtList']
    try:
        with open(file, 'r') as file:
            for line in file:
                URL = makeKeywordURL(line)
                formatted_line = line.replace(" ", "")
                database.createTables(formatted_line)
                jsonFile = getSearchResult(URL)# Retrieve the JSON file from the URL
                resultCount = getResultCount(jsonFile) # Retrieve the result count from the JSON file
                createEntries(jsonFile, resultCount)
                
    
                message = getIdNums(resultCount, jsonFile) # Retrieve each detail and create the Email
                messageFormatted = MIMEText('\n'.join(message))
                #print(messageFormatted)
            print(URL)
    except FileNotFoundError:
        print("There was a problem opening the file, exiting")
        exit(0)
    finally:
        file.close()

def timedSearch(URL):
    startTime = int(datetime.now().timestamp())
    counter = 0
    print(startTime)
    
    while (True):
        if (int(datetime.now().timestamp() - startTime) >= int(config['DEFAULT']['checkFrequency'])):
            jsonFile = getSearchResult(URL)
            resultCount = getResultCount(jsonFile)
            message = getIdNums(resultCount, jsonFile)
            messageFormatted = MIMEText('\n'.join(message))
            print(messageFormatted) # UNCOMMENT TO PRINT THE FORMATTED EMAIL MESSAGE
            startTime = int(datetime.now().timestamp())
            
def makeKeywordURL(keywords):
    URL = 'https://services.nvd.nist.gov/rest/json/cves/2.0?keywordSearch=' + keywords
    URL = URL.replace(" ", "%20")
    return URL